# Crypto MCP Assistant - Docker Compose Configuration
# Configurare completa pentru development si production

version: '3.8'

services:
  # =============================================================================
  # Main Application
  # =============================================================================
  crypto-assistant:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-mcp-assistant
    restart: unless-stopped
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - TRADING_MODE=${TRADING_MODE:-paper}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://crypto_user:crypto_pass@postgres:5432/crypto_assistant
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - STREAMLIT_HOST=0.0.0.0
      - STREAMLIT_PORT=8501
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    ports:
      - "8000:8000"  # FastAPI
      - "8501:8501"  # Streamlit Dashboard
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-crypto_redis_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: crypto-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=crypto_assistant
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=crypto_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_assistant"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring Stack (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crypto-network
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: crypto-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana.ini:/etc/grafana/grafana.ini:ro
    networks:
      - crypto-network
    profiles: ["monitoring"]
    depends_on:
      - prometheus

  # =============================================================================
  # Development Services
  # =============================================================================
  crypto-assistant-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crypto-mcp-assistant-dev
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=true
      - TRADING_MODE=paper
      - LOG_LEVEL=DEBUG
      - DEVELOPMENT_MODE=true
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://crypto_user:crypto_pass@postgres:5432/crypto_assistant
    ports:
      - "8000:8000"
      - "8501:8501"
      - "8888:8888"  # Jupyter
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      - redis
      - postgres
    networks:
      - crypto-network
    profiles: ["development"]
    command: >
      bash -c "python scripts/start_assistant.py --mode full --log-level DEBUG"

  # =============================================================================
  # Testing Service
  # =============================================================================
  crypto-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crypto-tests
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - TRADING_MODE=paper
      - TEST_DATABASE_URL=postgresql://crypto_user:crypto_pass@postgres:5432/crypto_assistant_test
    volumes:
      - .:/app
    depends_on:
      - postgres
    networks:
      - crypto-network
    profiles: ["testing"]
    command: >
      bash -c "pytest tests/ -v --cov=src --cov-report=html --cov-report=term"

# =============================================================================
# Networks
# =============================================================================
networks:
  crypto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# Usage Examples:
# =============================================================================
# 
# Development mode:
# docker-compose --profile development up -d
# 
# Production mode:
# docker-compose up -d
# 
# With monitoring:
# docker-compose --profile monitoring up -d
# 
# Run tests:
# docker-compose --profile testing run --rm crypto-tests
# 
# Scale the main application:
# docker-compose up -d --scale crypto-assistant=2
# 
# View logs:
# docker-compose logs -f crypto-assistant
# 
# =============================================================================